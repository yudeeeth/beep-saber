{"version":3,"sources":["App.js","index.js"],"names":["App","container","camera","scene","renderer","room","clock","THREE","killerBalls","useEffect","socket","io","withCredentials","extraHeaders","on","console","log","id","msg","x","y","positions","left","position","right","changeKillerBallPosition","spawnObjects","geometry","setInterval","add","object","color","Math","random","userData","velocity","objectType","z","createObject","arr","i","onWindowResize","aspect","window","innerWidth","innerHeight","updateProjectionMatrix","setSize","render","delta","getDelta","children","length","cube","prop","dist","boundingSphere","pow","radius","distanceToSquared","remove","handleIntesections","multiplyScalar","document","createElement","body","appendChild","background","set","BoxLineGeometry","translate","light","normalize","createBasicRoom","spawnKillerBalls","antialias","setPixelRatio","devicePixelRatio","outputEncoding","xr","enabled","domElement","addEventListener","VRButton","createButton","setAnimationLoop","className","ReactDOM","getElementById"],"mappings":"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","file":"static/js/main.7da9ab14.chunk.js","sourcesContent":["import \"./App.css\";\nimport { VRButton } from \"three/examples/jsm/webxr/VRButton.js\";\nimport * as THREE from \"three\";\nimport { BoxLineGeometry } from 'three/examples/jsm/geometries/BoxLineGeometry.js';\nimport { io } from \"socket.io-client\";\nimport { useEffect } from \"react\";\n\nfunction App() {\n  const clock = new THREE.Clock();\n  let container;\n  let camera, scene, raycaster, renderer;\n  let room;\n  let currentSelection = 'left';\n  let spawnObjectInterval;\n  let killerBalls = {};\n\n  useEffect(() => {\n    const socket = io(\"http://localhost:5000/\", {\n      withCredentials: true,\n      extraHeaders: {\n        \"my-custom-header\": \"abcd\"\n      }\n    });;\n\n    socket.on(\"connect\", () => {\n      console.log(socket.id);\n    });\n\n    socket.on(\"coords\",(msg)=>{\n      console.log(\"Moved\");\n      let x = msg[1].x;\n      let y = msg[1].y;\n      x = 1.5 - x * 3;\n      y = 3 - y * 3;\n\n      let positions = {\n        left: killerBalls.left.position,\n        right: killerBalls.right.position\n      }\n      console.log(msg[0]);\n      positions[msg[0]?\"left\":\"right\"].x = x;\n      positions[msg[0]?\"left\":\"right\"].y = y;\n      changeKillerBallPosition(positions.left,positions.right);\n    });\n\n  }, []);\n\n  const createBasicRoom = () => {\n    // Create a room with LineSegments and a box line geometry with line basic material and add it to the scene\n    room = new THREE.LineSegments(\n      new BoxLineGeometry(3, 3, 15, 6, 6, 15).translate(0, 1.5, 0),\n      new THREE.LineBasicMaterial({ color: 0x808080 })\n    );\n    scene.add(room);\n\n    // Add light to the scene\n    scene.add(new THREE.HemisphereLight(0x606060, 0x404040));\n\n    const light = new THREE.DirectionalLight(0xffffff);\n    light.position.set(1, 1, 1).normalize();\n    scene.add(light);\n  }\n\n  const createObject = (geometry) => {\n    const object = new THREE.Mesh(\n      geometry,\n      new THREE.MeshLambertMaterial({ color: Math.random() * 0xffffff })\n    );\n\n    object.userData.velocity = new THREE.Vector3();\n    object.userData.objectType = 'obstacle';\n\n    object.position.x = Math.random() * 3 - 1.5;\n    object.position.y = Math.random() * 3;\n    object.position.z = -6;\n\n    let arr = ['x','y','z'];\n\n    object.userData.velocity.z = 0.05;\n    return object;\n  }\n\n  const spawnObjects = (geometry) => {\n    spawnObjectInterval = setInterval(() => {\n      room.add(createObject(geometry));\n    }, 1000);\n  }\n\n  const spawnKillerBalls = () => {\n    let arr = ['left','right'];\n    for(let i =0;i<2;i++){\n      const object = new THREE.Mesh(\n        new THREE.SphereGeometry(0.2, 16, 8),\n        new THREE.MeshLambertMaterial({ color: Math.random() * 0xffffff })\n      );\n      object.position.x = 0;\n      object.position.y = 1.5;\n      object.position.z = -1;\n      object.userData.objectType = 'killerBall';\n      room.add(object);\n      killerBalls[arr[i]] = object;\n    }\n  }\n\n  const changeKillerBallPosition = (left,right) => {\n    let arr = ['x','y','z'];\n    for(let i = 0;i<3;i++){\n      killerBalls.left.position[arr[i]] = left[arr[i]];\n    }\n    for(let i = 0;i<3;i++){\n      killerBalls.right.position[arr[i]] = right[arr[i]];\n    }\n  }\n\n  init();\n  animate();\n\n\n  function init(){\n    // Make a container and append it to the body\n    container = document.createElement(\"div\");\n    document.body.appendChild(container);\n\n    // Create a three js scene and set background color\n    scene = new THREE.Scene();\n    scene.background = new THREE.Color(0x505050);\n\n    // Create a camera and set its position and add it to the scene\n    camera = new THREE.PerspectiveCamera(50, window.innerWidth / window.innerHeight, 0.1, 10 );\n    camera.position.set(0, 1.6, 3);\n    scene.add(camera);\n\n    createBasicRoom();\n    \n    spawnObjects(new THREE.BoxGeometry(0.15, 0.15, 0.15));\n    spawnKillerBalls();\n\n    raycaster = new THREE.Raycaster();\n\n    // Create a renderer and set its size and exanble xr and add it to the container\n    renderer = new THREE.WebGLRenderer({ antialias: true });\n    renderer.setPixelRatio(window.devicePixelRatio);\n    renderer.setSize(window.innerWidth, window.innerHeight);\n    renderer.outputEncoding = THREE.sRGBEncoding;\n    renderer.xr.enabled = true;\n    container.appendChild(renderer.domElement);\n\n    window.addEventListener(\"resize\", onWindowResize);\n\n    document.body.appendChild(VRButton.createButton(renderer));\n\n    // Remove this later\n    // container.addEventListener('mousedown', (event) => {\n    //   if(event.button === 0){\n    //     currentSelection = 'left';\n    //   }else if(event.button === 2){\n    //     currentSelection = 'right';\n    //   }\n    // });\n    \n    // container.addEventListener(\"mousemove\", (event)=>{\n    //   let x = event.clientX;\n    //   let y = event.clientY;\n    //   x = -1.5 + x / window.innerWidth * 3;\n    //   y = 3 - (y / window.innerHeight) * 3;\n    //   let positions = {\n    //     left: killerBalls.left.position,\n    //     right: killerBalls.right.position\n    //   }\n    //   positions[currentSelection].x = x;\n    //   positions[currentSelection].y = y;\n    //   changeKillerBallPosition(positions.left,positions.right);\n    // });\n\n  }\n\n  function onWindowResize() {\n    camera.aspect = window.innerWidth / window.innerHeight;\n    camera.updateProjectionMatrix();\n    renderer.setSize(window.innerWidth, window.innerHeight);\n  }\n\n  function animate() {\n    renderer.setAnimationLoop(render);\n  }\n\n  const handleIntesections = () => {\n    for (let i = 0; i < room.children.length; i++) {\n      if (room.children[i].userData.objectType === \"obstacle\") {\n        const cube = room.children[i];\n        for (let prop in killerBalls){\n          let dist;\n          if(cube.geometry.boundingSphere !== null && killerBalls[prop].geometry.boundingSphere !== null){\n            dist = Math.pow(cube.geometry.boundingSphere.radius,2) + Math.pow(killerBalls[prop].geometry.boundingSphere.radius,2);\n          }\n          if (cube.position.distanceToSquared(killerBalls[prop].position) < dist) {\n            console.log('collision');\n            room.remove(cube);\n          }\n        }\n      }\n    }\n  }\n\n  function render() {\n    const delta = clock.getDelta() * 60;\n\n    handleIntesections();\n\n    for (let i = 0; i < room.children.length; i++) {\n      const cube = room.children[i];\n      if (cube.userData.objectType === \"obstacle\") {\n        cube.userData.velocity.multiplyScalar(1 - 0.001 * delta);\n        cube.position.add(cube.userData.velocity);\n        if (cube.position.z < -7.5 || cube.position.z > 7.5) {\n          room.remove(cube);\n        }\n      }\n    }\n\n    renderer.render(scene, camera);\n  }\n  return <div className=\"App\"></div>;\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);"],"sourceRoot":""}